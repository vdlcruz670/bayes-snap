---
title: "Bayes_snap"
format: html
editor: visual
---

# Libraries

```{r}
library(tidycensus)
library(dplyr)
library(bayesrules)
library(tidyverse)
library(janitor)
library(brms) # for model
library(plotly)
library(naniar)
library(rstanarm)
library(ggplot2)
library(broom.mixed)
library(ggiraph) # For the map
library(bayesplot)
```

# Creating Data Sets

### Viewing ALL variables

```{r}
# var <- load_variables(2022, "acs5", cache = TRUE)
# View(var)
```

### Data set for model

```{r}
# Load ACS data with relevant variables
census_data <- get_acs(
  geography = "tract",
  state = "15", # FIPS code for Hawaii
  variables = c(
    snap_rate = "DP03_0074P",  # Households receiving SNAP
    total_households = "B22003_001",    # Total households
    median_income = "B19013_001",       # Median household income
    percent_employment = "DP03_0004P",  # Employment rate
    percent_poverty = "DP03_0119P",     # Families below poverty level
    percent_education = "DP02_0068P",   # High school graduate or higher
    percent_disability = "DP02_0072P",  # Disability status
    percent_female_head = "DP02_0018P", # Female-headed households
    percent_with_children_under_18 = "B23010_002", # Has children under 18 y/o
    average_household_size = "B25010_001" # Average household size
    ),
  year = 2022,
  survey = "acs5",
  output = "wide"
)

# Calculate SNAP participation rate
census_data <- census_data %>%
  select(snap_rateE, median_incomeE, percent_employmentE, percent_povertyE,
         percent_educationE, percent_disabilityE, percent_female_headE,
         percent_with_children_under_18E, average_household_sizeE) %>%
  rename(
    median_income = median_incomeE,
    percent_employment = percent_employmentE,
    percent_poverty = percent_povertyE,
    percent_education = percent_educationE,
    percent_disability = percent_disabilityE,
    percent_female_head = percent_female_headE,
    percent_with_children_under_18 = percent_with_children_under_18E,
    average_household_size = average_household_sizeE
    )
```

### Data set for map

```{r}
hi_snap_2022_acs5 <- get_acs(state = "HI", 
                             geography = "tract", 
                             variables = c(
                    snap_rate = "DP03_0074P",  # Households receiving SNAP
                    total_households = "B22003_001",    # Total households
                    median_income = "B19013_001",       # Median household income
                    percent_employment = "DP03_0004P",  # Employment rate
                    percent_poverty = "DP03_0119P",     # Families below poverty level
                    percent_education = "DP02_0068P",   # High school graduate or higher
                    percent_disability = "DP02_0072P",  # Disability status
                    percent_female_head = "DP02_0018P", # Female-headed households
                    percent_with_children_under_18 = "B23010_002", # Has children under 18 y/o
                    average_household_size = "B25010_001", # Average household size
                    percent_population = "B16008_011" # Population 18+ y/o
                    ),
                             geometry = TRUE,
                             survey = "acs5",
                             year = 2022) %>%
  filter(GEOID != "15003981200")
```

# Graphs

### Median SNAP rate for our data set

```{r}
# Calculate the median of the snap_rateE variable
median_snap_rate <- median(census_data$snap_rateE, na.rm = TRUE)

# Print the median snap rate
print(median_snap_rate)
```

### Basic plot

```{r}
income_snap_plot <- hi_snap_2022_acs5 %>%
   pivot_wider(id_cols = c("NAME", "GEOID", "geometry"), names_from = variable, values_from = estimate) 
  
library(ggpubr)
ggplot(data = income_snap_plot, aes(x = percent_disability, y = snap_rate)) +
  geom_point(alpha = 0.7, color = "blue") +
  xlim(0,100) +
  ylim(0,100) +
  #geom_smooth(method = "lm", color = "red", se = FALSE) +
  theme_minimal() +
  labs(title = "Relationship Between Median Income and SNAP Rates",
       x = "Median Income (USD)",
       y = "SNAP Rate (%)") +
  geom_smooth(method = "lm") +
  stat_cor()
```

### Highest SNAP rates according to tract

```{r}
top_snap_tracts <- hi_snap_2022_acs5 %>%
  filter(variable == "snap_rate") %>%
  arrange(desc(estimate)) %>%
  slice_head(n = 10) %>%
  mutate(NAME = reorder(NAME, estimate))

top_snap_chart <- ggplot(top_snap_tracts, aes(x = estimate, y = NAME)) +
  geom_col(fill = "purple") +
  theme_minimal() +
  labs(title = "Top 10 Census Tracts with Highest SNAP Rates",
       x = "SNAP Rate (%)",
       y = "Census Tract")

top_snap_chart
```

### Mapping

```{r}
hi_snap_2022_acs5 %>%
  filter(variable == "snap_rate") %>%
  ggplot(aes(fill = estimate)) + 
  geom_sf(color = NA) + 
  scale_fill_viridis_c(option = "turbo")
```

```{r}
# Interactive map for SNAP RATE
interactive_map <- hi_snap_2022_acs5 %>%
    filter(variable == "snap_rate") %>%
    ggplot() +
    geom_sf_interactive(aes(fill = estimate,
                          tooltip = paste("Snap Rate:", estimate)),
                          color = NA ) +
                        scale_fill_viridis_c(option = "magma") +
                        theme_minimal()

girafe(ggobj = interactive_map, 
       options = list(
         opts_hover(css = "fill:orange;stroke:black;cursor:pointer;"),
         opts_zoom(min = 0.5, max = 30)
      ))
```

```{r}
# Interactive map for POPULATION
interactive_map_2 <- hi_snap_2022_acs5 %>%
    filter(variable == "percent_population") %>%
    ggplot() +
    geom_sf_interactive(aes(fill = estimate,
                          tooltip = paste("Population:", estimate)),
                          color = NA ) +
                        scale_fill_viridis_c(option = "magma") +
                        theme_minimal()

girafe(ggobj = interactive_map_2, 
       options = list(
         opts_hover(css = "fill:orange;stroke:black;cursor:pointer;"),
         opts_zoom(min = 0.5, max = 30)
      ))
```

# Linear Regression Model

```{r}
# Bayesian Model using brms
bayesian_model <- brm(
  formula = snap_rateE ~ median_income + percent_employment + percent_poverty +
    percent_education + percent_disability + percent_female_head +
    percent_with_children_under_18 + average_household_size,
  data = census_data,
  family = gaussian(),
  prior = c(
    prior(normal(0, 10), class = "b"),        # Priors for coefficients
    prior(normal(50, 10), class = "Intercept") # Prior for intercept
  ),
  chains = 4, iter = 4000, seed = 123
)
```

```{r}
# Model Summary
summary(bayesian_model)
```

```{r}
# Tidy the model output using broom.mixed
tidy_bayes_model <- broom.mixed::tidy(bayesian_model)

ggplot(tidy_bayes_model, aes(x = term, y = estimate)) +
  geom_point() +
  geom_errorbar(aes(ymin = estimate - std.error, ymax = estimate + std.error)) +
  coord_flip() +
  labs(title = "Model Coefficients with Confidence Intervals",
       x = "Predictors", y = "Estimated Coefficient") +
  theme_minimal()
```

### Posterior Distribution of the Predictors

```{r}
plot(bayesian_model)
```

### Comparing the model to the data set

```{r}
pp_check(bayesian_model)
```
